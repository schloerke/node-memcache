// Generated by CoffeeScript 1.3.1
var host, mc, memcache, num_keys, port, util;

util = require('util');

memcache = require('../lib/memcache.js');

port = 11211;

host = "127.0.0.1";

num_keys = function(obj) {
  var count, k;
  count = 0;
  for (k in obj) {
    count++;
  }
  return count;
};

mc = null;

exports.t = {
  setUp: function(callback) {
    if ((mc != null ? mc.conn : void 0) != null) {
      callback();
      return;
    }
    mc = new memcache.Client(port, host);
    mc.on('error', function(e) {
      if (e.errno === 111) {
        throw "You need to have a memcache server running on localhost:11211 for these tests to run";
        return;
      }
      throw "Unexpected error during connection: " + util.inspect(e);
    });
    mc.connect();
    mc.addHandler(function() {
      callback();
    });
  },
  tearDown: function(callback) {
    mc.close();
    callback();
  },
  tests: {
    'test null value': function(test) {
      test.expect(2);
      mc.get('no_such_key', function(err, r) {
        test.equal(null, err);
        test.equal(null, r);
        return test.done();
      });
    },
    'test multi null value': function(test) {
      test.expect(2);
      mc.get('no such key', function(err, r) {
        test.equal(null, err);
        test.equal(num_keys(r), 0);
        return test.done();
      });
    },
    'test set, get, and expires': function(test) {
      var cb;
      test.expect(4);
      cb = function() {
        mc.get('set1', function(err, r) {
          var test_after_time;
          test.equal(null, err);
          test.equal('asdf1', r);
          test_after_time = function() {
            mc.get('set1', function(err, r) {
              test.equal(null, err);
              test.equal(null, r);
              test.done();
            });
          };
          setTimeout(test_after_time, 4000);
        });
      };
      mc.set('set1', 'asdf1', cb, 1);
    },
    'test set get with integer value': function(test) {
      test.expect(2);
      mc.set('testKey', 123, function() {
        mc.get('testKey', function(err, r) {
          test.equal(null, err);
          test.equal(123, r);
          test.done();
        });
      });
    },
    'test set del': function(test) {
      var cb;
      test.expect(4);
      cb = function() {
        mc.get('set2', function(err, r) {
          test.equal(null, err);
          test.equal('asdf2', r);
          return mc["delete"]('set2', function() {
            return mc.get('set2', function(err, r) {
              test.equal(null, err);
              test.equal(null, r);
              test.done();
            });
          });
        });
      };
      mc.set('set2', 'asdf2', cb, 0);
    },
    'utf8': function(test) {
      test.expect(1);
      mc.set('key1', 'привет', function() {
        mc.get('key1', function(err, r) {
          test.equal('привет', r);
          mc["delete"]('key1', function() {
            return test.done();
          });
        });
      });
    },
    'con disco': function(test) {
      var mc2;
      test.expect(2);
      mc2 = new memcache.Client(port, host);
      mc2.on('connect', function() {
        test.ok(true);
        mc2.close();
      });
      mc2.on('close', function() {
        test.ok(true);
        test.done();
      });
      mc2.connect();
    },
    'inc dec': function(test) {
      test.expect(14);
      mc.set('inc_bad', 'HELLO', function(err, response) {
        test.equal(response, 'STORED');
        return mc.increment('inc_bad', 2, function(err, ok) {
          test.ok(/^CLIENT_ERROR/.test(err));
          test.equal(ok, null);
          return mc.decrement('inc_bad', 3, function(err, ok) {
            test.ok(/^CLIENT_ERROR/.test(err));
            test.equal(ok, null);
            return mc.increment('inc_bad', null, function(err, ok) {
              test.ok(/^CLIENT_ERROR/.test(err));
              test.equal(ok, null);
              return mc.decrement('inc_bad', null, function(err, ok) {
                test.ok(/^CLIENT_ERROR/.test(err));
                test.equal(ok, null);
                return mc.set('inc_good', '5', function(err, response) {
                  test.equal(response, 'STORED');
                  return mc.increment('inc_good', 2, function(err, response) {
                    test.equal(response, 7);
                    return mc.increment('inc_good', function(err, response) {
                      test.equal(response, 8);
                      return mc.decrement('inc_good', function(err, response) {
                        test.equal(response, 7);
                        return mc.decrement('inc_good', 4, function(err, response) {
                          test.equal(response, 3);
                          test.done();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    },
    'version': function(test) {
      test.expect(2);
      mc.version(function(error, success) {
        test.equal(error, null);
        test.equal(success.length, 5);
        test.done();
      });
    },
    'stats': function(test) {
      test.expect(6);
      mc.stats(function(error, success) {
        test.ok(success.pid, "server has a pid");
        return mc.stats('settings', function(error, success) {
          test.ok(success.maxconns);
          return mc.stats('items', function(error, success) {
            test.ok(num_keys(success) > 0);
            return mc.stats('sizes', function(error, success) {
              test.ok(num_keys(success) > 0);
              return mc.stats('slabs', function(error, success) {
                test.ok(num_keys(success) > 0);
                return mc.stats('notreal', function(error, success) {
                  test.equal(error, 'ERROR');
                  test.done();
                });
              });
            });
          });
        });
      });
    }
  }
};
